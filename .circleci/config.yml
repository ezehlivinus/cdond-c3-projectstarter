version: 2.1
orbs:
  # node: 'circleci/node:4.1'
  slack: circleci/slack@4.1

commands:
  notify-slack:
    description: Notify Slack channel of a error or failure.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Notify Slack
          command: |
            - slack/notify:
                event: fail
                message: '$(env.CIRCLE_JOB) failed on $(env.CIRCLE_BRANCH) $(env.CIRCLE_BUILD_URL)'
                channel: '#general'
                template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        description: The workflow ID.
        type: string
    steps:
      - run:
          name: Destroy environments due to failure
          when: on_fail
          command: |
            export WORKFLOW_ID=<< parameters.WORKFLOW_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}
  
  revert-migration:
    description: Revert the database migration.
    steps:
      - run:
          name: Revert database migration
          when: on_fail
          command: |
            cd backend
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
           
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end dependencies for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end dependencies for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists --- Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Ensure front-end infrastructure exist---Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory; Add the created EC2 instance public IP to the ansible inventory file
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1 \
              >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ['60:60:a5:39:23:92:40:ed:5f:c7:8b:c3:9c:57:fb:64']
      # attach workspace to the instance
      - attach_workspace:
          name: Attach ansible/circleci directory/workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
      # - run: 
      #     name: Configure Install other dependencies
      #     command: |
      #       cd .circleci/ansible
      #       ansible-playbook -i inventory.txt playbook.yml
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:14.0.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            echo 'Trying to run migrations'
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            cd backend
            npm install
            echo 'Now running migrations'
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            echo 'Migrations done'
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/Y7mPFggX4RtGg4v2iPmjf5/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - run:
          name: Return migration results to CircleCI
          command: |
            curl https://kvdb.io/Y7mPFggX4RtGg4v2iPmjf5/migration_${CIRCLE_WORKFLOW_ID:0:7}
            
      # Here's where you will add some code to   # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migration  

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
            yum install -y awscli
            yum install -y wget
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            ls
            yum install -y epel-release-latest-7.noarch.rpm
            yum update -y
  
            yum install -y ansible
            yum install -y python3
            # curl --silent --location https://rpm.nodesource.com/setup_16.x | bash -
            # yum -y install nodejs
            yum install -y nodejs
            yum install -y npm
      - attach_workspace:
          name: Attach ansible/circleci directory/workspace
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}    
          

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]