version: 2.1
orbs:
  node: circleci/node@5.0.2
  # slack: circleci/slack@4.1

commands:
  notify-slack:
    description: Notify Slack channel of a error or failure.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Notify Slack
          command: |
            - slack/notify:
                event: fail
                message: '$(env.CIRCLE_JOB) failed on $(env.CIRCLE_BRANCH) $(env.CIRCLE_BUILD_URL)'
                channel: '#general'
                template: basic_fail_1

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      WORKFLOW_ID:
        description: The workflow ID.
        type: string
    steps:
      - run:
          name: Delete files uploaded to S3
          when: on_fail
          command: |
            export WORKFLOW_ID=<< parameters.WORKFLOW_ID >>
            aws s3 rm s3://udapeople-${WORKFLOW_ID} --recursive
      
      - run:
          name: Destroy environments due to failure
          when: on_fail
          command: |
            export WORKFLOW_ID=<< parameters.WORKFLOW_ID >>
            aws cloudformation delete-stack --stack-name udapeople-backend-${WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${WORKFLOW_ID}
  
  revert-migration:
    description: Revert the database migration.
    parameters:
      WORKFLOW_ID:
        description: The workflow ID.
        type: string
    steps:
      - run:
          name: Revert (last) database migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/Y7mPFggX4RtGg4v2iPmjf5/migration_<< parameters.WORKFLOW_ID >>)
            echo "Response from kvdb is $SUCCESS"
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm cache clean --force
                sudo rm -rf node_modules
                sudo rm package-lock.json
                npm install
                npm audit fix --force
                npm audit fix --audit-level=critical
                npm run migrations:revert
            fi  
            # cd backend
            # npm run migrations:revert

jobs:
  build-frontend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
      
  test-backend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm install
            npm run test
           
  scan-frontend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end dependencies for vulnerabilities
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical

  scan-backend:
    docker:
      # - image: circleci/node:13.8.0
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end dependencies for vulnerabilities
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists => Deploy backend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      
      - run:
          name: Ensure front-end infrastructure exist => Deploy frontend infrastructure
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory; Add the created EC2 instance public IP to the ansible inventory file
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1 \
              >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            echo CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths: 
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.10-alpine
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ['60:60:a5:39:23:92:40:ed:5f:c7:8b:c3:9c:57:fb:64']
      # attach workspace to the instance
      - attach_workspace:
          name: Attach ansible/circleci directory/workspace
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies awscli and ca certificates
          command: |
            sudo update-ca-certificates
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            pwd
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            pwd
            export WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            if grep -q "has been executed successfully." ./migrations_dump.txt
            then
              echo 'Making request to kvdb with the workflow id of: ${WORKFLOW_ID} '
              curl https://kvdb.io/Y7mPFggX4RtGg4v2iPmjf5/migration_${WORKFLOW_ID}  -d '1'
              echo '$WORKFLOW_ID The migration worked'
            else
              echo 'The migration likely failed OR has already been run'
              echo "migrations_dump.txt's content is: "
              cat migrations_dump.txt
              curl https://kvdb.io/Y7mPFggX4RtGg4v2iPmjf5/migration_${WORKFLOW_ID}  -d '0'
            fi
      # Here's where you will add some code to   # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migration:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip
            yum install -y awscli
            yum install -y wget
            wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            ls
            yum install -y epel-release-latest-7.noarch.rpm
            yum update -y
  
            yum install -y ansible
            yum install -y python3
            curl --silent --location https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - attach_workspace:
          name: Attach ansible/circleci directory/workspace
          at: ~/
      - run:
          name: Get backend url
          command: | 
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}   
          
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ['60:60:a5:39:23:92:40:ed:5f:c7:8b:c3:9c:57:fb:64']
      # attach workspace
      - attach_workspace:
          name: Attach ansible/circleci directory/workspace
          at: ~/

      - run:
          name: upgrade packages and Install AWS CLI
          command: |
            sudo apt update
            sudo apt upgrade -y
            sudo apt install awscli -y
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt install -y curl tar gzip
            sudo apt install -y python3
            sudo apt install -y python3-pip
            python3 --version
            python3 -m pip install --upgrade pip
            # pip3 install ansible
            python3 -m pip install ansible --user
      - run:
          name: Deploy backend
          command: |
            # your code here

            cat > backend/.env \<<- EOF
            TYPEORM_CONNECTION=$TYPEORM_CONNECTION
            TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR
            TYPEORM_ENTITIES=$TYPEORM_ENTITIES
            TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS
            TYPEORM_HOST=$TYPEORM_HOST
            TYPEORM_PORT=$TYPEORM_PORT
            TYPEORM_USERNAME=$TYPEORM_USERNAME
            TYPEORM_PASSWORD=$TYPEORM_PASSWORD
            TYPEORM_DATABASE=$TYPEORM_DATABASE
            EOF
            cat backend/.env
            
            cd backend
            npm install
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            ls -a && pwd
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-prometheus-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - add_ssh_keys: 
  #         fingerprints: ['60:60:a5:39:23:92:40:ed:5f:c7:8b:c3:9c:57:fb:64']
  #     - run: yum install -y tar gzip
  #     - run:
  #       - name: Get and add prometheus Public IP into Ansible
  #         command: |
  #           export PROMETHEUS_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=project-3-section-4-instance" \
  #             --query "Reservations[*].Instances[*].PublicIpAddress" \
  #             --output text \
  #             --region us-east-1)
  #           echo "PROMETHEUS_IP = ${PROMETHEUS_IP}"
  #           # check if Prometheus IP is empty
  #           if [ -z "${PROMETHEUS_IP}" ]; then
  #             echo "Prometheus IP is empty - exiting"
  #             exit 1
  #           fi
  #           echo "${PROMETHEUS_IP}" >> .circleci/ansible/monitoring-inventory.txt
  #           cat .circleci/ansible/inventory.txt
  #     - run:
  #       - name: Initialise Prometheus
  #         command: |
  #           cd .circleci/ansible
  #           echo \
  #           "global:
  #             scrape_interval: 1s
  #             evaluation_interval: 1s
  #             external_labels:
  #               monitor: "prometheus"
  #           scrape_configs:
  #             - job_name: "node"
  #               ec2_sd_configs:
  #                 - region: us-east-1
  #                   access_key: ${AWS_ACCESS_KEY_ID}
  #                   secret_key: ${AWS_SECRET_ACCESS_KEY}
  #                   port: 9100" > ./roles/configure-prometheus-node-exporter/files/prometheus.yml
  #           # ansible-playbook -i inventory.txt deploy-prometheus.yml

  #     - persist_to_workspace:
  #         name: Persist monitoring-inventory.txt and prometheus.yml to workspace
  #         root: .
  #         paths:
  #           - .circleci/ansible/monitoring-inventory.txt
  #           - .circleci/ansible/roles/configure-prometheus-node-exporter/files/prometheus.yml

  # configure-prometheus-infrastructure:
  #   docker:
  #     - image: python:3.10-alpine
  #   steps:
  #     - checkout
  #     - add_ssh_keys: 
  #         fingerprints: ['60:60:a5:39:23:92:40:ed:5f:c7:8b:c3:9c:57:fb:64']
  #     - attach_workspace:
  #         name: Attach workspace
  #         at: .
  #     - run:
  #       name: install tar and gzip
  #         command: apk add --no-cache tar gzip
  #     - run:
  #       name: install ansible
  #         command: |
  #         apk add --update ansible
  #         ansible --version
  #     - run: 
  #       name: Install dependencies
  #         command: |
  #           python3 --version
  #           pip3 install awscli --upgrade --user
  #     - run:
  #       - name: Configure Prometheus server
  #         command: |
  #           pwd
  #           cd .circleci/ansible
  #           pwd
  #           cat monitoring-inventory.txt
  #           ansible-playbook -i monitoring-inventory.txt configure-prometheus.yml
  
  smoke-test:
    docker:
      # Lightweight Docker image 
        # - image: python:3.10-alpine
        - image: python:3.7-alpine3.16
      # - image: cimg/node:18.7.0
    steps:
      # Checkout code from git
      - checkout
      # - run: sudo apt update -y
      # - run: sudo apt upgrade -y
      # - run:
      #     name: Install dependencies
      #     command: sudo apt install awscli tar gzip curl -y
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update --no-cache tar gzip nodejs npm curl aws-cli

      - run:
          name: Backend smoke test.
          command: |
            # your code here
            # Get the backend IP
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query "Reservations[*].Instances[*].PublicIpAddress" \
              --output text \
              --region us-east-1)
            # Get backend url
            export API_URL="http://${BACKEND_IP}:3030"
            echo "The backend URL is ${API_URL}"
            sleep 2m
            # make a request to the backend
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here 

            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}   
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum install -y tar gzip

      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migration:
          WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}


  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here

            # Fetch the Old workflow ID
            # export OldWorkflowID=$(aws cloudformation \
            #   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
            #     --no-paginate --output text)
            # echo OldWorkflowID: "${OldWorkflowID}"

            #put the list of stacks here
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

            export CURRENT_WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7}"
            echo Current workflow ID: "${CURRENT_WORKFLOW_ID}"

            # if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              for stack in "${STACKS[@]}"
              do
                # get the last substring of the current stack name: sample 2ee8cb9
                # export OLD_WORKFLOW_ID=$(echo $stack| cut -d'-' -f 3) # This works also
                export OLD_WORKFLOW_ID=$(echo $stack | awk -F'-' '{print $NF}')  
                echo OLD_WORKFLOW_ID: "${OLD_WORKFLOW_ID}"

                if [[ "${OLD_WORKFLOW_ID}" != "${CURRENT_WORKFLOW_ID}" ]]
                then
                  # your code here
                  echo "Removing old stacks"
                  echo "Removing stack: ${stack}"
                  aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
                  # aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                  # aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
                  aws cloudformation delete-stack --stack-name ${stack}
                else 
                  echo "No old stacks to remove"
                  echo "Current stack: ${stack}"
                  echo "CURRENT_WORKFLOW_ID: ${CURRENT_WORKFLOW_ID}"
                  echo "OLD_WORKFLOW_ID: ${OLD_WORKFLOW_ID}"
                  echo "OLD_WORKFLOW_ID == CURRENT_WORKFLOW_ID: ${OLD_WORKFLOW_ID} == ${CURRENT_WORKFLOW_ID}"
                fi
              done
            
      # Here's where you will add some code to rollback on failure
      # - destroy-environment:
      #     WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migration:
      #     WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}  

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]

